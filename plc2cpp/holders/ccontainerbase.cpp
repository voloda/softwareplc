/*
 *  This file is part of Software PLC for RT-Linux.
 *
 *  Software PLC for RT-Linux is free software; you can redistribute 
 *  it and/or modify it under the terms of the GNU General Public 
 *  License as published by the Free Software Foundation; either 
 *  version 2 of the License, or (at your option) any later version.
 *
 *  Software PLC for RT-Linux is distributed in the hope that it 
 *  will be useful, but WITHOUT ANY WARRANTY; without even the implied 
 *  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
 *  See the GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Software PLC for RT-Linux; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Author: Vladimir Kloz <Vladimir.Kloz@dtg.cz>
 *  Project home: http://sourceforge.net/projects/softwareplc
 *  Version: $Revision: 1.6 $
 */
#include "plc2cpp_globals.h"

#include "include/ccontainerbase.h"

const char *CContainerBase :: GenerateLineInfo(void)
{

	snprintf(m_pBuff, 1024, "\n#line %d \"%s\"\n", m_iLineNumber, (sActualFile.length() > 0 ) ? sActualFile.c_str() : "");
	return m_pBuff;
}

void CContainerBase :: WriteHeaderStart(void)
{
	CurrentOutput << "#ifndef _PLC2CPP_GENER_" << m_sBlockName << "_H_\n";
	CurrentOutput << "\t#define _PLC2CPP_GENER_" << m_sBlockName << "_H_\n";

	CurrentOutput << "\n\t#include <plc.h>\n";

//	CurrentOutput << "\t#include \"" << pProjectFile << ".h\"\n\n";
}

void CContainerBase :: WriteHeaderEnd(void)
{
	CurrentOutput << "#endif\n";
}

void CContainerBase :: WriteSourceStart(void)
{
	CurrentOutput << "\n#include \"" << sProjectName.c_str() << ".h\"\n";
	CurrentOutput << "#include \"" << m_sBlockName << ".h\"\n\n";
}

void CContainerBase :: WriteComment(void)
{
	CurrentOutput << "/* *************************** */\n";
	CurrentOutput << "/* PLC2CPP autogenerated file  */\n";
	CurrentOutput << "/* If you wish make edits, use */\n";
	CurrentOutput << "/* Original source file:       */\n";
	CurrentOutput << "/* " << ((sActualFile.length() > 0) ? sActualFile.c_str() : "stdin") << " */\n";
	CurrentOutput << "/* *************************** */\n";
}

// if iType == 0 - header file, == 1 - source
// file
int CContainerBase :: OpenSourceFile(int iType)
{
	m_sFileName = pTargetDirectory;
	
	if (iType == 0)
		m_sFileName += "/include/";
	else
		m_sFileName += "/";
	
	m_sFileName += m_sBlockName;

	if (iType == 0)
		m_sFileName += ".h";
	else
		m_sFileName += ".cpp";

	vsGeneratedFiles.push_back(m_sFileName);

	CurrentOutput.open(m_sFileName.c_str());
	
	WriteComment();
	
	if (iType == 0)
		WriteHeaderStart();
	else
	{
		if (m_sBlockName == sProjectName)
			CurrentOutput << "#define __CPP_INIT__\n";

		WriteSourceStart();
	}

	return 1;
}

CContainerBase :: CContainerBase(int iLineNumber)
{
	m_iLineNumber = iLineNumber;
}

CContainerBase :: ~CContainerBase(void) 
{

}

void CContainerBase :: SetLine(int iLineNumber)
{
	m_iLineNumber = iLineNumber;
}

const char *CContainerBase :: GetBlockName(void)
{
	return(m_sBlockName.c_str());
}

void CContainerBase :: ShowError(const string &sMessage)
{
	cerr << "Error (line: " << m_iLineNumber << "): " << sMessage.c_str() << "\n";
	iExitCode = 1;
}

